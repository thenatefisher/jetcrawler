class Classifier < ActiveRecord::Base

    attr_accessible :source_make, :source_model, :target_make, :target_model, 
                    :source_id, :suggested_prefix, :serial_prefix, :min_sn, 
                    :max_sn, :active, :serial
                    
    attr_accessor   :serial

    before_create   :init
    
    validate        :validate_window
    
    # set object defaults
    def init
        active ||= false
        min_sn ||= 0
        max_sn ||= 999999
    end
    
    # has a target make and model been added to this rule?
    def filled?
        !target_make.blank? && !target_model.blank?
    end
    
    # find and return the target record based
    # on this classifier data and a serial number 
    def match_target_by_serial

        t = Target.where(
            :serial_integer => serial_integer(serial), 
            :make => target_make,
            :model_name => target_model
        ).first if filled? && active
        
    end
    
    # create a new target record if this classifier is
    # filled and there is now target to match with
    def create_target
    
        return false if target_make.blank? || 
                        target_model.blank? || 
                        serial.blank?
    
        target_params = {:make => target_make, 
                        :model_name => target_model,
                        :serial_integer => serial_integer(serial),
                        :serial => serial}
                    
        target = Target.where(target_params).first
        target ||= Target.create(target_params)

        return target

    end

    # Static Method - attempt to find a classifier rule from the source
    # record data in this instance
    def self.find_from_source_record(source)
    
       # find any rule based on make, model and source
       rule = Classifier.find(:first, :conditions => ["
                                      source_model = ?
                                      AND source_make = ?
                                      AND source_id = ?",
                                      source[:source_model], 
                                      source[:source_make],
                                      source[:source_id]])
                                      
       # if we found one, then use it to generate an integer serial number
       # and look for a more specific rule
       serial_range_rule = Classifier.find(:first, :conditions => ["
                                      source_model = ?
                                      AND source_make = ?
                                      AND source_id = ?
                                      AND min_sn < ?
                                      AND max_sn > ?",
                                      source[:source_model], 
                                      source[:source_make],
                                      source[:source_id],
                                      rule.serial_integer(source[:serial]),
                                      rule.serial_integer(source[:serial])]) if !rule.blank?

        rule = serial_range_rule if !serial_range_rule.blank?

        # if a rule matches, tune the rule sn prefix suggestion
        rule.serial = source[:serial] if !rule.blank?
        rule.update_prefix_suggestion! if !rule.blank?

        # return the classifier rule
        return rule
        
    end
 
    # create distinct serial number INTEGER from aircraft sn string
    # remove prefix, letters and zero padding from serial
    def serial_integer(serial_string)
    
        return false if serial_string.blank?

        sn = serial_string
        sn = serial_string.gsub(/^(#{serial_prefix})/, '') if serial_prefix
        sn = serial_string.gsub(/[^\d]/,'').to_i
    
    end
    
    # use this serial to update a suggested prefix value
    # in the classifier
    def update_prefix_suggestion!

        suggested_prefix ||= serial
        suggestion = ""
        serial.split(//).each_with_index do |a, i|		    
            break if !suggested_prefix[i] || a != suggested_prefix[i]
            suggestion << a
        end
        suggested_prefix = suggestion
        save

    end
        
    # ensure the serial number window is valid
    def validate_window

        # resets
        max_sn ||= 999999
        min_sn = 0 if min_sn.blank? || min_sn < 0
        max_sn = 0 if max_sn < 0

        # can't reverse the max and min window
        min_sn = max_sn if min_sn > max_sn
        max_sn = min_sn if max_sn < min_sn

        # can't intersect with another rule of the same make/model type
        if !Classifier.find(:all, :conditions => ["source_model = ?
                                          AND source_make = ?
                                          AND source_id = ?
                                          AND max_sn >= ? AND min_sn <= ?",
                                          source_model, 
                                          source_make,
                                          source_id, 
                                          min_sn, min_sn]).empty?

            errors.add(:min_sn, "minimum limit is within another rule's range")
        end
        
        # can't intersect with another rule of the same make/model type
        if !Classifier.find(:all, :conditions => ["source_model = ?
                                          AND source_make = ?
                                          AND source_id = ?
                                          AND max_sn >= ? AND min_sn <= ?",
                                          source_model, 
                                          source_make,
                                          source_id, 
                                          max_sn, max_sn]).empty?

            errors.add(:max_sn, "maximum limit is within another rule's range")
        end
    end    


end
