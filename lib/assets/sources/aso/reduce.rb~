class AsoReduce < JetCrawlerReduce

    # receives a hash from the mapper class
    
    # does the translator search
    # uses a rule if no translation
    # otherwise creates an empty rule
    
    # handles all aspects of updating the aircraft

    # create hash of make model and serial
    ex_id = Digest::SHA1.hexdigest params[:ex_make] + params[:ex_model] + params[:serial]

    # this is to set the scope of a
    a = nil 

    # find translation table entry
    t = Translation.where(:ex_id => ex_id, :source_id => params[:source_id]).first

    # otherwise, try to create a translation	
    if t.nil? || !Airframe.find(t.jd_id)

        # look for translation rule
        rule = Rule::Get_or_create_rule(params)

        # use it to look for a specific airframe
        if a = rule.match(params[:serial]) 

            # load aircraft with mms data from rule
            a.serial_iterator = rule.serial_integer(params[:serial])
            a.make            = rule.jd_make
            a.model_name      = rule.jd_model

        else # else if the rule is filled, then make an airframe
            if rule.jd_make && rule.jd_model
                a = Airframe.create(:make => rule.jd_make, :model_name => rule.jd_model,
                                    :serial_iterator => rule.serial_integer(params[:serial]),
                                                                            :serial => params[:serial])
            end

        end

        # create the translation for future use
        t = Translation.create(:ex_id => ex_id, :source_id => params[:source_id], :jd_id => a.id) if a
    else

        # find aircraft from jetcrawler db
        a = Airframe.find(t.jd_id)

    end

    # return the airframe record
    return a

end
